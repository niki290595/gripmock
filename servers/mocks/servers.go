// Code generated by MockGen. DO NOT EDIT.
// Source: servers.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	servers "github.com/quintans/gripmock/servers"
	reflect "reflect"
)

// MockRebooter is a mock of Rebooter interface
type MockRebooter struct {
	ctrl     *gomock.Controller
	recorder *MockRebooterMockRecorder
}

// MockRebooterMockRecorder is the mock recorder for MockRebooter
type MockRebooterMockRecorder struct {
	mock *MockRebooter
}

// NewMockRebooter creates a new mock instance
func NewMockRebooter(ctrl *gomock.Controller) *MockRebooter {
	mock := &MockRebooter{ctrl: ctrl}
	mock.recorder = &MockRebooterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRebooter) EXPECT() *MockRebooterMockRecorder {
	return m.recorder
}

// Boot mocks base method
func (m *MockRebooter) Boot(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Boot", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Boot indicates an expected call of Boot
func (mr *MockRebooterMockRecorder) Boot(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Boot", reflect.TypeOf((*MockRebooter)(nil).Boot), ctx)
}

// Shutdown mocks base method
func (m *MockRebooter) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown
func (mr *MockRebooterMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockRebooter)(nil).Shutdown))
}

// Reset mocks base method
func (m *MockRebooter) Reset(reset servers.Reset) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset", reset)
}

// Reset indicates an expected call of Reset
func (mr *MockRebooterMockRecorder) Reset(reset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockRebooter)(nil).Reset), reset)
}

// UploadDir mocks base method
func (m *MockRebooter) UploadDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// UploadDir indicates an expected call of UploadDir
func (mr *MockRebooterMockRecorder) UploadDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadDir", reflect.TypeOf((*MockRebooter)(nil).UploadDir))
}

// CleanUploadDir mocks base method
func (m *MockRebooter) CleanUploadDir() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanUploadDir")
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanUploadDir indicates an expected call of CleanUploadDir
func (mr *MockRebooterMockRecorder) CleanUploadDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanUploadDir", reflect.TypeOf((*MockRebooter)(nil).CleanUploadDir))
}
